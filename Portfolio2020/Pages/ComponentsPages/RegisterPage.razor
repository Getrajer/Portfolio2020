@using System.Text.RegularExpressions
@using System.Net.Mail

<head>
    <link rel="stylesheet" href="../css/register_page_style.css" />
</head>

<div class="component">
    <div class="component_container">

        <div id="@ActualScheme" class="functional">

            <div class="register">
                <div class="register_container">
                    <div class="title_container">
                        <h5>Register</h5>
                    </div>

                    <div class="input_container">
                        <label>Name</label>
                        <input @bind="name" />
                        <p class="error_info">@name_error</p>
                    </div>

                    <div class="input_container">
                        <label>Last Name</label>
                        <input @bind="last_name" />
                        <p class="error_info">@last_name_error</p>
                    </div>

                    <div class="input_container">
                        <label>Username</label>
                        <input @bind="user_name" />
                        <p class="error_info">@user_name_error</p>
                    </div>

                    @if (needs_address)
                    {
                        <div class="input_container">
                            <label>Address</label>
                            <input @bind="address" />
                            <p class="error_info">@address_error</p>
                        </div>

                        <div class="input_container">
                            <label>Postcode</label>
                            <input @bind="post_code" />
                            <p class="error_info">@post_code_error</p>
                        </div>

                        <div class="input_container">
                            <label>City</label>
                            <input @bind="city" />
                            <p class="error_info">@city_error</p>
                        </div>

                        <div class="input_container">
                            <label>Country</label>
                            <input @bind="country" />
                            <p class="error_info">@country_error</p>
                        </div>
                    }

                    @if (needs_phone_number)
                    {
                        <div class="input_container">
                            <label>Phone number</label>
                            <input @bind="phone_number" />
                            <p class="error_info">@phone_number_error</p>
                        </div>
                    }

                    <div class="input_container">
                        <label>Email</label>
                        <input @bind="email" />
                        <p class="error_info">@email_error</p>
                    </div>

                    <div class="input_container">
                        <label>Password</label>
                        <input @bind="password" />
                        <p class="error_info">@password_error</p>
                    </div>

                    <div class="input_container">
                        <label>Password Confirmation</label>
                        <input @bind="password_confirmation" />
                        <p class="error_info">@password_confirmation_error</p>
                    </div>

                    <div class="button_container">
                        <button @onclick="Register">Register</button>
                    </div>

                </div>
            </div>

        </div>


        <div class="component_panel">
            <div class="component_panel_container">
                <div class="title">
                    <h1>Custom login page</h1>
                </div>

                <div class="description">
                    <p>This is custom register page. </p>

                    <p>Person who would will manage website is able to change color scheme. Can as well change password validation rules and if user needs to give address or phone number.</p>

                    <p>User of the page can create account. Input of the user is going to be validated by server and if evrything is going to be fine user is going to be added to database. </p>
                </div>

                <div class="options">
                    <div class="option">
                        <h4>Change color scheme</h4>

                        <div class="choice_check_boxes">

                            <div @onclick="@(e => ChangeColorScheme(1))" class="color_scheme_option">
                                <svg xmlns="http://www.w3.org/2000/svg" width="40px" height="40px" viewBox="0 0 70.87 70.87">
                                    <title>Color_sheme1</title>
                                    <g id="Warstwa_2" data-name="Warstwa 2">
                                        <g id="Warstwa_1-2" data-name="Warstwa 1">
                                            <g>
                                                <rect x="9.85" y="15.83" width="20.83" height="20.83" style="fill: #27437b;stroke: #231f20;stroke-miterlimit: 10" />
                                                <rect x="39.34" y="15.83" width="20.83" height="20.83" style="fill: #6182c1;stroke: #231f20;stroke-miterlimit: 10" />
                                                <rect x="25.02" y="40.35" width="20.83" height="20.83" style="fill: #f8f8f8;stroke: #231f20;stroke-miterlimit: 10" />
                                                <circle cx="35.44" cy="35.44" r="34.94" style="fill: none;stroke: #231f20;stroke-miterlimit: 10" />
                                            </g>
                                        </g>
                                    </g>
                                </svg>
                            </div>

                            <div @onclick="@(e => ChangeColorScheme(2))" class="color_scheme_option">
                                <svg xmlns="http://www.w3.org/2000/svg" width="40px" height="40px" viewBox="0 0 70.87 70.87">
                                    <title>color_scheme_2</title>
                                    <g id="Warstwa_2" data-name="Warstwa 2">
                                        <g id="Warstwa_1-2" data-name="Warstwa 1">
                                            <g>
                                                <rect x="9.85" y="15.83" width="20.83" height="20.83" style="fill: #8a2d91;stroke: #231f20;stroke-miterlimit: 10" />
                                                <rect x="40.61" y="15.83" width="20.83" height="20.83" style="fill: #a43a95;stroke: #231f20;stroke-miterlimit: 10" />
                                                <rect x="25.02" y="41.4" width="20.83" height="20.83" style="fill: #f8f8f8;stroke: #231f20;stroke-miterlimit: 10" />
                                                <circle cx="35.44" cy="35.44" r="34.94" style="fill: none;stroke: #231f20;stroke-miterlimit: 10" />
                                            </g>
                                        </g>
                                    </g>
                                </svg>
                            </div>

                            <div @onclick="@(e => ChangeColorScheme(3))" class="color_scheme_option">
                                <svg xmlns="http://www.w3.org/2000/svg" width="40px" height="40px" viewBox="0 0 70.87 70.87">
                                    <title>color_scheme_3</title>
                                    <g id="Warstwa_2" data-name="Warstwa 2">
                                        <g id="Warstwa_1-2" data-name="Warstwa 1">
                                            <g>
                                                <rect x="9.85" y="15.83" width="20.83" height="20.83" style="fill: #454952;stroke: #231f20;stroke-miterlimit: 10" />
                                                <rect x="40.61" y="15.83" width="20.83" height="20.83" style="fill: #868d9d;stroke: #231f20;stroke-miterlimit: 10" />
                                                <rect x="25.02" y="41.4" width="20.83" height="20.83" style="fill: #f8f8f8;stroke: #231f20;stroke-miterlimit: 10" />
                                                <circle cx="35.44" cy="35.44" r="34.94" style="fill: none;stroke: #231f20;stroke-miterlimit: 10" />
                                            </g>
                                        </g>
                                    </g>
                                </svg>
                            </div>

                            <div @onclick="@(e => ChangeColorScheme(4))" class="color_scheme_option">
                                <svg xmlns="http://www.w3.org/2000/svg" width="40px" height="40px" viewBox="0 0 70.87 70.87">
                                    <title>color_scheme_4</title>
                                    <g id="Warstwa_2" data-name="Warstwa 2">
                                        <g id="Warstwa_1-2" data-name="Warstwa 1">
                                            <g>
                                                <rect x="9.85" y="15.83" width="20.83" height="20.83" style="fill: #ebebeb;stroke: #231f20;stroke-miterlimit: 10" />
                                                <rect x="40.61" y="15.83" width="20.83" height="20.83" style="fill: #fff;stroke: #231f20;stroke-miterlimit: 10" />
                                                <rect x="25.02" y="41.4" width="20.83" height="20.83" style="fill: #1a1a1a;stroke: #231f20;stroke-miterlimit: 10" />
                                                <circle cx="35.44" cy="35.44" r="34.94" style="fill: none;stroke: #231f20;stroke-miterlimit: 10" />
                                            </g>
                                        </g>
                                    </g>
                                </svg>
                            </div>

                            <div @onclick="@(e => ChangeColorScheme(5))" class="color_scheme_option">
                                <svg xmlns="http://www.w3.org/2000/svg" width="40px" height="40px" viewBox="0 0 70.87 70.87">
                                    <title>color_scheme_5</title>
                                    <g id="Warstwa_2" data-name="Warstwa 2">
                                        <g id="Warstwa_1-2" data-name="Warstwa 1">
                                            <g>
                                                <rect x="9.85" y="15.83" width="20.83" height="20.83" style="fill: #73bf44;stroke: #231f20;stroke-miterlimit: 10" />
                                                <rect x="40.61" y="15.83" width="20.83" height="20.83" style="fill: #0c8441;stroke: #231f20;stroke-miterlimit: 10" />
                                                <rect x="25.02" y="41.4" width="20.83" height="20.83" style="fill: #f8f8f8;stroke: #231f20;stroke-miterlimit: 10" />
                                                <circle cx="35.44" cy="35.44" r="34.94" style="fill: none;stroke: #231f20;stroke-miterlimit: 10" />
                                            </g>
                                        </g>
                                    </g>
                                </svg>
                            </div>

                            <div @onclick="@(e => ChangeColorScheme(6))" class="color_scheme_option">
                                <svg xmlns="http://www.w3.org/2000/svg" width="40px" height="40px" viewBox="0 0 70.87 70.87">
                                    <title>color_scheme_6</title>
                                    <g id="Warstwa_2" data-name="Warstwa 2">
                                        <g id="Warstwa_1-2" data-name="Warstwa 1">
                                            <g>
                                                <rect x="9.85" y="15.83" width="20.83" height="20.83" style="fill: #ed184a;stroke: #231f20;stroke-miterlimit: 10" />
                                                <rect x="40.61" y="15.83" width="20.83" height="20.83" style="fill: #af1f23;stroke: #231f20;stroke-miterlimit: 10" />
                                                <rect x="25.02" y="41.4" width="20.83" height="20.83" style="fill: #f8f8f8;stroke: #231f20;stroke-miterlimit: 10" />
                                                <circle cx="35.44" cy="35.44" r="34.94" style="fill: none;stroke: #231f20;stroke-miterlimit: 10" />
                                            </g>
                                        </g>
                                    </g>
                                </svg>
                            </div>


                            <div @onclick="@(e => ChangeColorScheme(7))" class="color_scheme_option">
                                <svg xmlns="http://www.w3.org/2000/svg" width="40px" height="40px" viewBox="0 0 70.87 70.87">
                                    <title>color_scheme_7</title>
                                    <g id="Warstwa_2" data-name="Warstwa 2">
                                        <g id="Warstwa_1-2" data-name="Warstwa 1">
                                            <g>
                                                <rect x="9.85" y="15.83" width="20.83" height="20.83" style="fill: #f8ec24;stroke: #231f20;stroke-miterlimit: 10" />
                                                <rect x="40.61" y="15.83" width="20.83" height="20.83" style="fill: #cab72e;stroke: #231f20;stroke-miterlimit: 10" />
                                                <rect x="25.02" y="41.4" width="20.83" height="20.83" style="fill: #f8f8f8;stroke: #231f20;stroke-miterlimit: 10" />
                                                <circle cx="35.44" cy="35.44" r="34.94" style="fill: none;stroke: #231f20;stroke-miterlimit: 10" />
                                            </g>
                                        </g>
                                    </g>
                                </svg>
                            </div>

                        </div>
                    </div>

                    <div class="option">
                        <h4>Password unique characters</h4>
                        <div class="input_container">
                            <label>Number 1 - 5</label>
                            <input />
                        </div>

                        <div class="button_container">
                            <button @onclick="ChangeUniquePassword">Change</button>
                        </div>
                    </div>

                    <div class="option">
                        <h4>Password numeric characters</h4>
                        <div class="input_container">
                            <label>Number 1 - 5</label>
                            <input />
                        </div>

                        <div class="button_container">
                            <button @onclick="ChangeNumericPassword">Change</button>
                        </div>
                    </div>

                    <div class="option">
                        <h4>If needs address</h4>
                        <div class="button_container">
                            <button @onclick="ChangeIfNeedsAddress">@address_string_btn</button>
                        </div>
                    </div>

                    <div class="option">
                        <h4>If needs phone number</h4>
                        <div class="button_container">
                            <button @onclick="ChangeIfNeedsPhoneNumber">@phone_number_string_btn</button>
                        </div>
                    </div>

                </div>

                <h4>Console</h4>

                <div class="console">
                    <div class="console_container">
                        <p>@logged_in_status</p>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>



@code{


    /// <summary>
    /// This class will determine login component
    /// </summary>
    public class RegisterComponent
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string ColorScheme { get; set; }

        /// <summary>
        /// Will determine how many characters username must have
        /// </summary>
        public int MinUserNameCharacters { get; set; }

        /// <summary>
        /// Will determine how many unique chars password must have
        /// </summary>
        public int NumberOfPasswordUniqueChar { get; set; }

        /// <summary>
        /// Will determine how many number chars password must have
        /// </summary>
        public int NumberOfPasswordNumericChar { get; set; }


        /// <summary>
        /// Will determine if user needs to give adress
        /// </summary>
        public bool RequiresAddress { get; set; }

        /// <summary>
        /// Will determine if user needs to give phone number
        /// </summary>
        public bool RequiresPhoneNumber { get; set; }


        public RegisterComponent() { }
    }

    /// <summary>
    /// This class is used register
    /// </summary>
    public class UserAccount
    {
        public int Id { get; set; }
        public string UserName { get; set; }
        public string Name { get; set; }
        public string LastName { get; set; }
        public string Address { get; set; }
        public string Postcode { get; set; }
        public string City { get; set; }
        public string Country { get; set; }
        public string PhoneNumber { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }

        public UserAccount() { }
    }


    //Variables for user input
    protected string name = "";
    protected string last_name = "";
    protected string address = "";
    protected string post_code = "";
    protected string city = "";
    protected string country = "";
    protected string phone_number = "";
    protected string email = "";
    protected string user_name = "";
    protected string password = "";
    protected string password_confirmation = "";


    //Error Variables for register
    protected string user_name_error = "";
    protected string name_error = "";
    protected string last_name_error = "";
    protected string address_error = "";
    protected string post_code_error = "";
    protected string city_error = "";
    protected string country_error = "";
    protected string phone_number_error = "";
    protected string email_error = "";
    protected string password_error = "";
    protected string password_confirmation_error = "";

    //Text for buttons
    protected string address_string_btn = "Remove";
    protected string phone_number_string_btn = "Remove";
    protected string logged_in_status = "";

    //Variables for controling if register would need more information from user
    protected bool needs_address = true;
    protected bool needs_phone_number = true;

    protected int numeric_char = 3;
    protected int unique_char = 2;


    //Color sheme declaration
    protected string ActualScheme = "Scheme_1";

    /// <summary>
    /// Example account
    /// </summary>
    protected UserAccount example_account = new UserAccount();

    protected RegisterComponent new_register = new RegisterComponent();

    protected override async Task OnInitializedAsync()
    {
        new_register.Id = 0;
        new_register.ColorScheme = "Scheme_1";
        new_register.MinUserNameCharacters = 5;
        new_register.Name = "My custom register form";
        new_register.NumberOfPasswordNumericChar = 3;
        new_register.NumberOfPasswordUniqueChar = 2;
        new_register.RequiresAddress = true;
        new_register.RequiresPhoneNumber = true;
    }


    /// <summary>
    /// Will change if register form needs address from the user
    /// </summary>
    public void ChangeIfNeedsAddress()
    {
        if (needs_address == false)
        {
            needs_address = true;
            address_string_btn = "Remove";
            new_register.RequiresAddress = true;
        }
        else
        {
            needs_address = false;
            address_string_btn = "Add";
            new_register.RequiresAddress = false;
        }

    }

    /// <summary>
    /// Will change if register form needs phone number from the user
    /// </summary>
    public void ChangeIfNeedsPhoneNumber()
    {
        if (needs_phone_number == false)
        {
            needs_phone_number = true;
            phone_number_string_btn = "Remove";
            new_register.RequiresPhoneNumber = true;
        }
        else
        {
            needs_phone_number = false;
            phone_number_string_btn = "Add";
            new_register.RequiresPhoneNumber = false;
        }

    }

    /// <summary>
    /// Will change number of unique characters for password
    /// </summary>
    public void ChangeUniquePassword()
    {
        if (unique_char <= 5 && unique_char >= 0)
        {
            new_register.NumberOfPasswordUniqueChar = unique_char;

        }
    }

    /// <summary>
    /// Will change number of numeric characters for password
    /// </summary>
    public void ChangeNumericPassword()
    {
        if (numeric_char <= 5 && numeric_char >= 0)
        {
            new_register.NumberOfPasswordNumericChar = numeric_char;
        }
    }

    /// <summary>
    /// This function will create account
    /// </summary>
    public void Register()
    {


        //Reset errors
        user_name_error = "";
        name_error = "";
        last_name_error = "";
        address_error = "";
        post_code_error = "";
        city_error = "";
        country_error = "";
        phone_number_error = "";
        email_error = "";
        password_error = "";
        password_confirmation_error = "";


        bool is_error = false;

        if (name == "")
        {
            is_error = true;
            name_error = "Please enter your name";
        }

        if (last_name == "")
        {
            is_error = true;
            last_name_error = "Please enter your last name";
        }

        if (user_name == "")
        {
            is_error = true;
            user_name_error = "Please enter user name!";
        }
        else if (user_name.Length < 5)
        {
            is_error = true;
            user_name_error = "User name needs to be at least 5 char long";
        }

        //If address is requred
        if (needs_address == true)
        {
            if (city == "")
            {
                city_error = "Please enter your city";
                is_error = true;
            }
            else
            {
                //Here some function connected to database of all citirs should validate city
            }

            if (country == "")
            {
                country_error = "Please enter your country";
                is_error = true;
            }

            if (address == "")
            {
                address_error = "Please enter your address";
                is_error = true;
            }

            if (post_code == "")
            {
                post_code_error = "Please enter postcode";
                is_error = true;
            }
            else
            {
                //Here some function connected to database of all post codes should validate post code
            }
        }

        if(email == "")
        {
            email_error = "Please enter your email address";
            is_error = true;
        }
        else
        {
            bool isEmailTrue = IsValidEmail(email);

            if (isEmailTrue != true)
            {
                email_error = "Wrong email address";
                is_error = true;
            }
        }

        //If phone number is reequired
        if(new_register.RequiresPhoneNumber == true)
        {
            if(phone_number == "")
            {
                phone_number_error = "Please enter your phone number";
                is_error = true;
            }
            else
            {
                bool isValidPhoneNumber = IsPhoneNumber(phone_number);

                if (isValidPhoneNumber != true)
                {
                    phone_number_error = "Wrong phone number";
                    is_error = true;
                }
            }
        }

        if(password == "")
        {
            password_error = "Please enter your password";
            is_error = true;
        }
        else
        {
            bool isValidPassword = IsValidPassword(password);

            if(isValidPassword == true)
            {
                if(password != password_confirmation)
                {
                    password_confirmation_error = "Passwords are not equal";
                    is_error = true;
                }
            }
            else
            {
                password_confirmation_error = "Wrong password";
                is_error = true;
            }
        }

        if (is_error == false)
        {
            logged_in_status = "You heave created account";

            name = "";
            last_name = "";
            address = "";
            post_code = "";
            city = "";
            country = "";
            phone_number = "";
            email = "";
            user_name = "";
            password = "";
            password_confirmation = "";

            //Assign variables to the new user object

            //Return new user object and add it to data base
            //return account

        }
        else
        {
            logged_in_status = "Something went wrong with registering";
        }

    }

    /// <summary>
    /// Function will change color schemes of the login component
    /// </summary>
    /// <param name="choice"></param>
    public void ChangeColorScheme(int choice)
    {
        switch (choice)
        {
            case 1: { ActualScheme = "Scheme_1"; break; }
            case 2: { ActualScheme = "Scheme_2"; break; }
            case 3: { ActualScheme = "Scheme_3"; break; }
            case 4: { ActualScheme = "Scheme_4"; break; }
            case 5: { ActualScheme = "Scheme_5"; break; }
            case 6: { ActualScheme = "Scheme_6"; break; }
            case 7: { ActualScheme = "Scheme_7"; break; }
        }
    }


    #region Help function

    public bool IsValidEmail(string emailaddress)
    {
        if (emailaddress == null || emailaddress.Length < 0)
        {
            return false;
        }
        else
        {
            try
            {
                MailAddress m = new MailAddress(emailaddress);

                return true;
            }
            catch (FormatException)
            {
                return false;
            }
        }
    }

    protected bool validPassowrd;

    public bool IsValidPassword(string password)
    {
        if (password == null || password == "" || password.Length < 5)
        {
            return false;
        }
        else
        {
            char[] one = password.ToCharArray();
            char[] two = new char[one.Length];
            int c = 0;
            int n = 0;
            for (int i = 0; i < one.Length; i++)
            {
                if (!Char.IsLetterOrDigit(one[i]))
                {
                    two[c] = one[i];
                    c++;
                }
                if (one[i] == '1' || one[i] == '2' || one[i] == '3' || one[i] == '4' || one[i] == '5' || one[i] == '6' || one[i] == '7' || one[i] == '8' || one[i] == '9')
                {
                    n++;
                }
            }
            if (c < new_register.NumberOfPasswordUniqueChar)
            {
                return false;
            }

            if (n < new_register.NumberOfPasswordNumericChar)
            {
                return false;
            }
        }
        return true;
    }


    public static bool IsPhoneNumber(string number)
    {
        if (number != null || number.Length > 0)
        {
            return Regex.Match(number, @"^(\+[0-9]{9})$").Success;
        }
        else
        {
            return false;
        }
    }

    #endregion

}