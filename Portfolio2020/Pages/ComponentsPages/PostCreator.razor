@page "/CreatePost"

<head>
    <link href="https://fonts.googleapis.com/css2?family=Domine:wght@700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Martel:wght@600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="../css/components_style.css" />
    <link rel="stylesheet" href="../css/post_creator_style.css" />
</head>






<section id="components">
    <div class="components_container">

        <div class="component_nav">
            <div class="component_nav_container">

                <div class="top_nav">
                    <svg xmlns="http://www.w3.org/2000/svg" width="100px" height="70px" viewBox="0 0 235 132">
                        <title>Home</title>
                        <g id="Warstwa_2" data-name="Warstwa 2">
                            <g id="Logo">
                                <g>
                                    <polygon points="26.07 50.14 58.2 6.54 79.61 6.54 45.35 50.14 26.07 50.14" />
                                    <polygon points="83.89 11.21 73.19 25.22 92.46 92.18 101.03 75.05 83.89 11.21" />
                                    <polygon points="98.88 92.18 107.45 78.17 124.58 78.17 133.15 92.18 98.88 92.18" />
                                    <polygon points="208.1 50.14 175.98 6.54 154.56 6.54 188.83 50.14 208.1 50.14" />
                                    <polygon points="150.28 11.21 160.99 25.22 141.71 92.18 133.15 75.05 150.28 11.21" />
                                    <g>
                                        <polygon points="26.07 60.48 30.11 104.46 47.49 116.54 47.49 60.48 26.07 60.48" />
                                        <polygon points="28.56 107.46 42.53 117.46 11.48 117.46 28.56 107.46" />
                                    </g>
                                    <g>
                                        <polygon points="209.89 60.48 205.85 104.46 188.48 116.54 188.48 60.48 209.89 60.48" />
                                        <polygon points="207.4 107.46 193.43 117.46 224.48 117.46 207.4 107.46" />
                                    </g>
                                </g>
                            </g>
                        </g>
                    </svg>
                </div>

                <div class="underline"></div>

                <div class="comp_nav_links">
                    <ul>
                        <li>
                            <NavLink href="" Match="NavLinkMatch.All">
                                <span class="oi oi-home" aria-hidden="true"></span> Home
                            </NavLink>
                        </li>

                        <li>
                            <NavLink href="CustomShoeOrder" Match="NavLinkMatch.All">
                                <i class="fa fa-tshirt"></i> Custom clothing
                            </NavLink>
                        </li>

                        <li>
                            <NavLink href="LoginPage" Match="NavLinkMatch.All">
                                <i class="fas fa-user"></i> Login Page
                            </NavLink>
                        </li>

                        <li>
                            <NavLink href="RegisterPage" Match="NavLinkMatch.All">
                                <i class="fas fa-user-plus"></i> Register Page
                            </NavLink>
                        </li>

                        <li>
                            <NavLink href="CreatePost" Match="NavLinkMatch.All">
                                <i class="fas fa-file-word"></i> Create Post
                            </NavLink>
                        </li>

                        <li>
                            <NavLink href="Comments" Match="NavLinkMatch.All">
                                <i class="fas fa-comments"></i> Comments
                            </NavLink>
                        </li>

                        <li>
                            <NavLink href="Acordeon" Match="NavLinkMatch.All">
                                <i class="fas fa-th-list"></i> Acordeon
                            </NavLink>
                        </li>

                    </ul>
                </div>

            </div>
        </div>

        <div class="page">
            <div class="page_container">

                <div class="program_container">
                    <div class="all_posts_container">
                        @for (int j = POSTS.Count - 1; j >= 0; j--)
                        {
                            var p = POSTS[j];

                            if (p.IsBeeingEdited == false)
                            {
                                <div class="post_container">
                                    <div class="title_post">
                                        <h2>@p.PostTitle</h2>
                                        <div class="post_title_underline_container">
                                            <div class="post_title_underline"></div>
                                        </div>
                                    </div>

                                    @for (int i = 0; i < p.Paragraphs.Count; i++)
                                    {
                                        if (p.Images[i].Path != "" && p.Images[i].Path != null && p.Images[i].ImgBeforeAfter == true)
                                        {
                                            <div class="post_img_container">
                                                <img src="@p.Images[i].Path" alt="@p.Images[i].Name" />
                                            </div>
                                        }
                                        <div class="post_paragraph_container">
                                            <p>@p.Paragraphs[i]</p>
                                        </div>
                                        if (p.Images[i].Path != "" && p.Images[i].Path != "" && p.Images[i].ImgBeforeAfter == false)
                                        {
                                            <div class="post_img_container">
                                                <img src="@p.Images[i].Path" alt="@p.Images[i].Name" />
                                            </div>
                                        }
                                    }


                                    <div class="author_container">
                                        <div class="author_image_container">
                                            <img src="@p.Author.ProfileImagePath" alt="@p.Author.Name" />
                                        </div>

                                        <div class="author_description_container">
                                            <p><span class="bold">Author:</span> @p.Author.Name</p>
                                            <br />
                                            <p><span class="bold">Role:</span> @p.Author.AboutPerson</p>
                                        </div>
                                    </div>

                                    <div class="delete_post_button_container">
                                        <button @onclick="@(e =>DeletePost(p))">Delete Post</button>
                                        <button @onclick="@(e =>ToggleEditPost(p))">Edit Post</button>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="edit_post_container">
                                    <label>Title</label>
                                    <input @bind="p.PostTitle" />

                                    @for (int i = 0; i < p.Paragraphs.Count; i++)
                                    {

                                        if (p.Images[i].Path != "" && p.Images[i].Path != null && p.Images[i].ImgBeforeAfter == true)
                                        {
                                            <div class="post_img_container">
                                                <img src="@p.Images[i].Path" alt="@p.Images[i].Name" />
                                            </div>
                                        }

                                        <label>Paragraph @(i + 1)</label>
                                        <textarea @bind="p.Paragraphs[i]"></textarea>
                                        <p>Img Id @p.Images[i].Id</p>

                                        if (p.Images[i].Path != "" && p.Images[i].Path != "" && p.Images[i].ImgBeforeAfter == false)
                                        {
                                            <div class="post_img_container">
                                                <img src="@p.Images[i].Path" alt="@p.Images[i].Name" />
                                            </div>
                                        }

                                        <div class="image_add_container">
                                            <p class="text-muted">This is just a demonstration. When implemented user will be able to add image form local or server storeage.</p>
                                            <label>Add or Edit Image</label>
                                            @foreach (var img in images)
                                            {
                                                <label class="image_label" @onclick="@(e => EditImage(img, p, 0))">
                                                    <input type="radio" name="test" value="small" checked>
                                                    <img src="@img.Path" alt="@img.Name">
                                                </label>
                                            }

                                            <div class="image_position_buttons">
                                            </div>
                                        </div>
                                    }

                                    <button @onclick="@(e =>ToggleEditPost(p))">Finish</button>
                                </div>
                            }
                        }
                    </div>
                </div>


                <!--This is going to be displayed when adding the post-->
                @if (isPostEdited == false)
                {
                    <div class="program_container">
                        <div class="post_component">


                            <div class="add_post_button">
                                <button @onclick="ToggleAddPost">@ToggleButtonText</button>
                            </div>

                            @if (AddPostChecker == true)
                            {
                                <div class="add_post_container">
                                    <div class="add_title_container">
                                        <label>Title of post: </label>
                                        <input @bind="title" />
                                        <p class="error">@title_input_error</p>
                                    </div>

                                    <div class="add_paragraphs_images_container">
                                        @foreach (var o in paragraphs)
                                        {

                                            if (o.IfAddNext == true)
                                            {
                                                <div class="new_paragraph">

                                                    @if (o.ImgPath != null && o.ImgPath != "" && o.ImgBeforeAfter == true)
                                                    {
                                                        <img class="img_preview" src="@o.ImgPath" alt="@o.ImageName" />
                                                    }

                                                    <label>Paragraph content:</label>

                                                    <textarea @bind="o.ParagraphText"></textarea>

                                                    @if (o.ImgPath != null && o.ImgPath != "" && o.ImgBeforeAfter == false)
                                                    {
                                                        <img class="img_preview" src="@o.ImgPath" alt="@o.ImageName" />
                                                    }

                                                    <div class="add_image_btn_container">
                                                        <button @onclick="@(e => ToggleAddImage(paragraphs[o.Id]))">@o.ImgBtnTxt</button>
                                                    </div>
                                                    @if (o.IfAddImage == true)
                                                    {
                                                        <div class="image_add_container">
                                                            <p class="text-muted">This is just a demonstration. When implemented user will be able to add image from local or server storeage.</p>


                                                            @foreach (var i in images)
                                                            {
                                                                <label class="image_label" @onclick="@(e => ChangeImage(i, o))">
                                                                    <input type="radio" name="test" value="small" checked>
                                                                    <img src="@i.Path" alt="@i.Name">
                                                                </label>
                                                            }

                                                            <div class="image_position_buttons">
                                                                <button @onclick="@(e => AddImageAfter(paragraphs[o.Id]))">Set image before paragraph</button>
                                                                <button @onclick="@(e => AddImageBefore(paragraphs[o.Id]))">Set image after paragraph</button>
                                                            </div>

                                                        </div>
                                                    }
                                                    <div class="paragraphs_add_delete_buttons_container">
                                                        @if (paragraphs[o.Id + 1].IfAddNext != true)
                                                        {
                                                            if (o.Id != 0)
                                                            {
                                                                <button @onclick="@(e => CancelNewParagraph(paragraphs[o.Id]))">Delete Paragraph</button>
                                                            }

                                                            if (o.Id != NumberOfParagraphs - 1)
                                                            {
                                                                <button @onclick="@(e => AddAnotherParagraph(paragraphs[o.Id]))">Add New Paragraph</button>
                                                            }
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>

                                    <div class="create_post_btn_container">
                                        <button @onclick="CreateNewPost">Create Post</button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>

    </div>
</section>

@code {

    /// <summary>
    /// This class is a blueprint for post object
    /// </summary>
    public class Post
    {
        public int Id { get; set; }
        public string PostTitle { get; set; }
        public string DatePosted { get; set; }
        public Author Author { get; set; }

        public List<Image> Images;
        public List<string> Paragraphs;

        public bool IsBeeingEdited { get; set; }

        public Post()
        {
            Images = new List<Image>();
            Paragraphs = new List<string>();
        }

    }

    public class Author
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string AboutPerson { get; set; }
        public string ProfileImagePath { get; set; }

        public Author() { }
    }

    public class Image
    {
        public int Id { get; set; }
        public string Path { get; set; }
        public string Name { get; set; }
        public bool ImgBeforeAfter { get; set; }

        public Image() { }

        public Image(int id, string path, string name)
        {
            this.Name = name;
            this.Path = path;
        }
    }

    /// <summary>
    /// This object works as a blueprint for new paragraphs
    /// </summary>
    public class AddParagraph
    {
        public int Id { get; set; }
        public string ParagraphText { get; set; }
        public bool IfAddNext { get; set; }

        public string ImgBtnTxt { get; set; }
        public string ImgPath { get; set; }
        public string ImageName { get; set; }
        /// <summary>
        /// If true image is before paragraph if false image is after paragraph
        /// </summary>
        public bool ImgBeforeAfter { get; set; }
        public bool IfAddImage { get; set; }


        public AddParagraph()
        {
            IfAddNext = false;
            IfAddImage = false;
            ImgBeforeAfter = true;
            ImgBtnTxt = "Add Image";
        }
    }

    /// <summary>
    /// This Parameter checks if user wants to add post, if clicked it toggles the <div class="add_post_container"></div>
    /// </summary>
    [Parameter]
    public bool AddPostChecker { get; set; }

    /// <summary>
    /// This string changes text for toggle add post button
    /// </summary>
    protected string ToggleButtonText = "Add Post";

    /// <summary>
    /// This parameter controlls how many paragraps user can create
    /// </summary>
    [Parameter]
    public int NumberOfParagraphs { get; set; }

    /// <summary>
    /// This list is used to create paragraphs
    /// </summary>
    protected List<AddParagraph> paragraphs = new List<AddParagraph>();

    /// <summary>
    /// This is mock data list for images
    /// </summary>
    protected List<Image> images = new List<Image>();

    protected List<Post> POSTS = new List<Post>();

    /// <summary>
    /// Variable for author input
    /// </summary>
    protected string author = "";

    /// <summary>
    /// Variable for title imput
    /// </summary>
    protected string title = "";

    /// <summary>
    /// This is mock data item for author
    /// </summary>
    protected Author example_author;


    //Variables for error checking of user input
    /// <summary>
    /// Error message for title input
    /// </summary>
    protected string title_input_error = "";

    protected bool isPostEdited = false;
    protected string edit_post_btn = "Edit Post";


    protected override async Task OnInitializedAsync()
    {
        //Add post is set to false as deflaut and should be always like that
        AddPostChecker = false;

        //For this example number of Paragraps is set to 10 (Delete deflaut value when implementing)
        NumberOfParagraphs = 10;

        //This loop will create number of slots for creating new paragraphs
        for (int i = 0; i <= NumberOfParagraphs; i++)
        {
            AddParagraph p = new AddParagraph();
            p.Id = i;

            //Always first object set to true
            if (p.Id == 0)
            {
                p.IfAddNext = true;
            }

            paragraphs.Add(p);
        }


        //Mock img data
        Image i1 = new Image(0, "../images/article_img_1.jpg", "TechAbstract");
        Image i2 = new Image(1, "../images/article_img_2.jpg", "AI");


        images.Add(i1);
        images.Add(i2);

        //Mock data for the Author
        //When implemented add connection to user base with author autorisation
        example_author = new Author();
        example_author.Id = 0;
        example_author.Name = "Dave";
        example_author.AboutPerson = "Software Engeenier";
        example_author.ProfileImagePath = "../CommentsImages/2.jpg";

        //Mock Data for the example post

        Image mockI1 = images[1];
        Image mockI2 = images[0];

        mockI1.ImgBeforeAfter = true;
        mockI2.ImgBeforeAfter = true;

        Post mock_post = new Post();

        mock_post.Id = 0;
        mock_post.Author = example_author;
        mock_post.DatePosted = "02.03.2020";
        mock_post.PostTitle = "Technology Today !";
        mock_post.Images.Add(mockI1);
        mock_post.Images.Add(mockI2);
        mock_post.Images[0].Id = 0;
        mock_post.Images[1].Id = 1;

        mock_post.Paragraphs.Add("Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n Praesent at urna vitae sapien finibus pretium. Mauris volutpat suscipit tristique.\n\n Suspendisse vel velit turpis.\n Aliquam neque purus, pellentesque sit amet velit in, imperdiet aliquet nisl. In sed aliquam odio, vel dapibus arcu.\n\n Morbi dapibus metus ac dui suscipit rutrum. Sed elementum, erat ac sodales fermentum, eros nisl consequat nisi, eget rhoncus lectus dui quis dolor. Pellentesque fermentum erat non ultricies sagittis. Donec efficitur, quam at consequat interdum, ante orci eleifend erat, aliquet posuere nunc mi condimentum purus. Sed vel pulvinar nunc, eu cursus est. Vivamus condimentum malesuada nulla, a tincidunt dolor viverra sed. Morbi tincidunt consectetur vestibulum. Sed elementum volutpat sodales.\n\n" +

            "Ut porta nec nibh sit amet finibus. Etiam faucibus lorem quis leo luctus congue. Ut sit amet imperdiet augue.\n Fusce bibendum justo auctor pellentesque viverra. Vestibulum sed bibendum massa, varius bibendum est. Proin lacinia sollicitudin nisi nec porttitor. Cras sed massa viverra, ornare lorem sit amet, scelerisque purus. Praesent ut eros diam. Aenean in fermentum felis. Mauris pretium nisl id fringilla euismod." +

            "Phasellus eget ex eget ex tristique scelerisque. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n\n Donec imperdiet turpis quam, posuere posuere magna scelerisque in. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nunc efficitur tempus efficitur. Mauris efficitur, eros eget ornare dictum, purus ipsum semper orci, non auctor arcu augue sit amet mauris. Nunc vitae convallis turpis. Proin feugiat, urna ac fringilla facilisis, turpis mauris faucibus ipsum, non mollis augue tellus at velit. Donec nec consectetur est. Fusce ac eros erat. Proin et odio odio. Cras porta pellentesque libero sit amet maximus.\n\n"
            );
        mock_post.Paragraphs.Add("Maecenas vel efficitur nunc. Sed scelerisque urna purus, id commodo urna dapibus non. Donec non interdum diam, eget fringilla lectus. Sed iaculis luctus velit, id accumsan nisl consectetur sit amet.\n\n Proin lacinia ex ligula, in pellentesque arcu bibendum eu. Phasellus dictum malesuada diam eu molestie. Proin mauris leo, maximus ut quam vitae, scelerisque ultricies purus. Sed tempus, nunc nec pulvinar semper, diam massa maximus ipsum, nec fermentum sapien est nec eros. Donec vehicula magna mauris, nec placerat libero egestas imperdiet.\n\n Aliquam erat volutpat. Praesent laoreet velit congue tortor faucibus interdum.\n\n");

        POSTS.Add(mock_post);
    }

    /// <summary>
    /// This function toggles Add Post section
    /// </summary>
    public void ToggleAddPost()
    {
        //Reset Variables
        title = "";
        author = "";

        if (AddPostChecker == false)
        {
            AddPostChecker = true;
            ToggleButtonText = "Cancel";
        }
        else if (AddPostChecker == true)
        {
            AddPostChecker = false;
            ToggleButtonText = "Add Post";
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="p"></param>
    public void AddAnotherParagraph(AddParagraph p)
    {
        if (p.Id < NumberOfParagraphs - 1)
        {
            paragraphs[p.Id + 1].IfAddNext = true;
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="p"></param>
    public void CancelNewParagraph(AddParagraph p)
    {
        if (p.Id != 0)
        {
            p.IfAddNext = false;
            p.ImageName = "";
            p.ImgPath = "";
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="p"></param>
    public void AddImageBefore(AddParagraph p)
    {
        if (p.ImgBeforeAfter == true)
        {
            p.ImgBeforeAfter = false;
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="p"></param>
    public void AddImageAfter(AddParagraph p)
    {
        if (p.ImgBeforeAfter == false)
        {
            p.ImgBeforeAfter = true;
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="i"></param>
    /// <param name="p"></param>
    public void ChangeImage(Image i, AddParagraph p)
    {
        p.ImgPath = i.Path;
        p.ImageName = i.Name;
    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="p"></param>
    public void ToggleAddImage(AddParagraph p)
    {
        if (p.IfAddImage == false)
        {
            p.IfAddImage = true;
            p.ImgBtnTxt = "Cancel adding image";
        }
        else
        {
            p.IfAddImage = false;
            p.ImageName = "";
            p.ImgPath = "";
            p.ImgBtnTxt = "Add Image";
        }
    }


    /// <summary>
    ///
    /// </summary>
    public void CreateNewPost()
    {
        //Reset variables
        title_input_error = "";

        if (title.Length < 5)
        {
            title_input_error = "Title needs to be at least 5 characters long!";
        }
        else
        {
            Post post = new Post();
            //Example author implementation
            post.Author = example_author;
            post.PostTitle = title;

            for (int i = 0; i < paragraphs.Count - 1; i++)
            {
                if (paragraphs[i].IfAddNext == true)
                {
                    Image image = new Image();
                    image.Id = i;
                    image.ImgBeforeAfter = paragraphs[i].ImgBeforeAfter;
                    image.Name = paragraphs[i].ImageName;
                    image.Path = paragraphs[i].ImgPath;

                    post.Paragraphs.Add(paragraphs[i].ParagraphText);
                    post.Images.Add(image);
                }
            }
            POSTS.Add(post);

            //This loop and methods will reset data for the input
            paragraphs.Clear();
            title = "";
            ToggleButtonText = "Add Post";
            AddPostChecker = false;
            for (int i = 0; i <= NumberOfParagraphs; i++)
            {
                AddParagraph p = new AddParagraph();
                p.Id = i;

                //Always first object set to true
                if (p.Id == 0)
                {
                    p.IfAddNext = true;
                }

                paragraphs.Add(p);
            }
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="post"></param>
    public void DeletePost(Post post)
    {
        POSTS.RemoveAt(post.Id);

        //Reset Id
        if (POSTS.Count != 0)
        {
            for (int i = 0; i < POSTS.Count; i++)
            {
                POSTS[i].Id = i;
            }
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="post"></param>
    public void ToggleEditPost(Post post)
    {
        if (post.IsBeeingEdited == false)
        {
            post.IsBeeingEdited = true;
            isPostEdited = true;
        }
        else if (post.IsBeeingEdited == true)
        {
            post.IsBeeingEdited = false;
            isPostEdited = false;
        }
    }

    protected string test = "Test";

    public void EditImage(Image img, Post post, int img_id)
    {
        test = post.Images[img_id].Path;
    }

}
